package com.epam.config;

import static org.springframework.security.config.Customizer.withDefaults;

import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

import com.epam.service.JpaUserDetailsService;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityScheme;

@OpenAPIDefinition(info = @Info(title = "REST API", version = "1.0",
contact = @Contact(name = "Prasanth Ganapavarapu", email = "Prasanthkumar_Ganapavarapu.com")),
security = {@SecurityRequirement(name = "basicAuth"),@SecurityRequirement(name = "bearerToken")}
)
@SecurityScheme(name = "basicAuth", type = SecuritySchemeType.HTTP, scheme = "basic")
@SecurityScheme(name = "bearerToken", type = SecuritySchemeType.HTTP, scheme = "bearer", bearerFormat = "JWT")
@EnableConfigurationProperties(RsaKeyProperties.class)
@Configuration
@EnableMethodSecurity
public class SecurityConfig {
	private final RsaKeyProperties jwtConfigProperties;
	private JpaUserDetailsService jpaUserDetailService;
	
	private static final String[] PUBLIC_PATHS = { "/v3/api-docs.yaml", "/v3/api-docs/**", "/swagger-ui/**",
	"/swagger-ui.html"};

	public SecurityConfig(RsaKeyProperties jwtConfigProperties, JpaUserDetailsService jpaUserDetailService) {
		super();
		this.jwtConfigProperties = jwtConfigProperties;
		this.jpaUserDetailService = jpaUserDetailService;
	}
	
	@Bean
	@Order(1)
	public SecurityFilterChain basicAuthSecurityFilterChain(HttpSecurity http) throws Exception {
	        http.securityMatcher("/token")
	                .authorizeHttpRequests(authorize -> authorize
	                .requestMatchers(PUBLIC_PATHS).permitAll()
	                .anyRequest().authenticated())
	                .csrf().disable()
	                .httpBasic(withDefaults());
	        return http.build();
	}

}
